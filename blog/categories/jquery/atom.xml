<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jQuery | Watsonbox]]></title>
  <link href="http://watsonbox.github.com/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://watsonbox.github.com/"/>
  <updated>2012-09-27T15:24:56+02:00</updated>
  <id>http://watsonbox.github.com/</id>
  <author>
    <name><![CDATA[Howard Wilson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FB Canvas Apps #1: Dialog Positioning]]></title>
    <link href="http://watsonbox.github.com/blog/2012/09/25/fb-canvas-apps-1-dialog-positioning/"/>
    <updated>2012-09-25T16:33:00+02:00</updated>
    <id>http://watsonbox.github.com/blog/2012/09/25/fb-canvas-apps-1-dialog-positioning</id>
    <content type="html"><![CDATA[<p>Having worked on several Facebook applications, I've built up a few tricks to solve some common problems. This one shows how to get a dialog (jQuery UI, in this case) to appear centered in the browser rather than centered in the canvas iFrame.</p>

<p>The problem is caused by Facebook resizing the canvas iFrame to accommodate the entire page. When a dialog is displayed inside the canvas application, it is displayed vertically centered inside that iFrame, which can cause the current browser scroll position to jump up or down accordingly.</p>

<p>The fix is to call Facebook's <a href="http://developers.facebook.com/docs/reference/javascript/FB.Canvas.getPageInfo/"><code>FB.Canvas.getPageInfo</code></a> JS API method, to position the dialog relative to the user's current browser scroll position.</p>

<p>Here is an implementation which uses <a href="http://coffeescript.org/">CoffeeScript</a> and extends the <a href="http://jqueryui.com/demos/dialog/">jQuery UI dialog widget</a>.</p>

<p>``` coffeescript Facebook Initialization
$ ->
  # Async Facebook initialisation
  window.fbAsyncInit = -></p>

<pre><code>FB.init({ appId: 'APP_ID', status: true, cookie: true, xfbml: true })
FB.Canvas.setAutoGrow()

# Allows other components to hook into this event with $(document).on('fb:initialized', -&gt; ...)
$(document).trigger('fb:initialized')
</code></pre>

<p>```</p>

<p>``` coffeescript The Dialog Widget
CanvasDialog =
  # Some example default dialog options
  options: {</p>

<pre><code>width: 600,
modal: true,
autoOpen: true
</code></pre>

<p>  }</p>

<p>  _init: -></p>

<pre><code>if @_inCanvas
  if this._fbLoaded()
    this._showDialogInCanvas()
  else
    $(document).on 'fb:initialized', =&gt; this._showDialogInCanvas()
else
  this._showDialog()
</code></pre>

<p>  # Displays the dialog positioned correctly inside the FB canvas iFrame
  _showDialogInCanvas: -></p>

<pre><code>FB.Canvas.getPageInfo (info) =&gt;
  @options.position = ['center', info.scrollTop + 50]
  this._showDialog()
</code></pre>

<p>  # Calls the jQuery UI dialog's original init method
  <em>showDialog: -> $.ui.dialog.prototype.</em>init.apply(this, arguments)</p>

<p>  # True if dialog is being loading inside the FB iFrame (any iFrame for that matter)
  _inCanvas: top != self</p>

<p>  # True if FB javascript API has been loaded
  _fbLoaded: -> typeof FB != 'undefined'</p>

<p>$.widget "ui.canvasDialog", $.ui.dialog, CanvasDialog
```</p>

<p><code>coffeescript Example Usage
$('#canvasDialog').canvasDialog()
</code></p>

<h3>Notes</h3>

<ul>
<li><p>By triggering an event when Facebook is initialized, the <code>CanvasDialog</code> is able to wait for the Facebook JS API to become available if it has not yet been loaded.</p></li>
<li><p>In development it can be useful to work outside the Facebook environment. The <code>CanvasDialog</code> detects this and shows the dialog without attempting to call the Facebook API.</p></li>
<li><p>In the past I've often used the excellent and well maintained <a href="http://www.jacklmoore.com/colorbox">ColorBox</a> library for dialogs. I note that it too has been <a href="https://github.com/jackmoore/colorbox/pull/93">updated</a> with similar functionalilty.</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
