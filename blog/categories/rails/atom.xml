<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Watsonbox]]></title>
  <link href="http://watsonbox.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://watsonbox.github.com/"/>
  <updated>2014-06-14T12:16:25+02:00</updated>
  <id>http://watsonbox.github.com/</id>
  <author>
    <name><![CDATA[Howard Wilson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lazy and Partial Data Loading with Ember.js and Rails]]></title>
    <link href="http://watsonbox.github.com/blog/2014/06/13/lazy-and-partial-data-loading-with-ember-dot-js-and-rails/"/>
    <updated>2014-06-13T14:43:13+02:00</updated>
    <id>http://watsonbox.github.com/blog/2014/06/13/lazy-and-partial-data-loading-with-ember-dot-js-and-rails</id>
    <content type="html"><![CDATA[<p>While learning <a href="http://emberjs.com/">Ember.js</a>, I couldn&rsquo;t find all the info laid out clearly in one place on these subjects, so thought I&rsquo;d write up my findings. I&rsquo;m using Ember.js 1.5.1, Ember Data 1.0.0-beta.7+canary.f482da04 (!!), and Rails 4.1.0.</p>

<h2>Lazy Loading Relationships</h2>

<p>Most of the Rails/Ember guidelines out there suggest that related data should normally be sideloaded, which is great and helps reduce the number of HTTP requests required, or data duplication (in the case of embedded data). To sideload data, set up the relationship and Rails serializer as follows:</p>

<p><code>coffeescript app/assets/javascripts/models/project.js.coffee
App.Project = DS.Model.extend
  name: DS.attr('string')
  description: DS.attr('string')
  invoices: DS.hasMany('invoice')
</code></p>

<p><code>ruby app/serializers/project_serializer.rb
class ProjectSerializer &lt; ActiveModel::Serializer
  attributes :id, :name
  has_many :invoices, embed: :ids, include: true # Sideload relationship
end
</code></p>

<p>``` json Example JSON Response
{
  &ldquo;projects&rdquo;: [</p>

<pre><code>{ "id": 1, "name": "Project 1", "description": "...", "invoice_ids": [1, 2] }
</code></pre>

<p>  ],
  &ldquo;invoices&rdquo;: [</p>

<pre><code>{ "id": 2, "reference": "INV-002", "date": "2014-06-11", "project_id": 1 },
{ "id": 1, "reference": "INV-001", "date": "2014-04-04", "project_id": 1 }
</code></pre>

<p>  ]
}
```</p>

<h3>Async Loading</h3>

<p>Often we&rsquo;d prefer to lazily load the associated data only when it&rsquo;s referenced. Ember Data calls this an async relationship. Simply modify the above by omitting the <code>include</code> serializer option and adding <code>async</code> to the relationship:</p>

<p><code>coffeescript app/assets/javascripts/models/project.js.coffee (partial)
invoices: DS.hasMany('invoice', { async: true })
</code></p>

<p><code>ruby app/serializers/lazy_project_serializer.rb (partial)
has_many :invoices, embed: :ids
</code></p>

<p>``` json Example JSON Response
{
  &ldquo;projects&rdquo;: [</p>

<pre><code>{ "id": 1, "name": "Project 1", "description": "...", "invoice_ids": [1, 2] }
</code></pre>

<p>  ]
}
```</p>

<p>When the <code>invoices</code> relationship is accessed, Ember Data will automatically make a request to <code>/invoices?ids[]=1&amp;ids[]=2</code> (or presumably wherever that route is defined), so the Rails <code>InvoicesController</code> must be set up to restrict returned data based on the <code>ids</code> parameter.</p>

<p>Note that if an association is set to <code>async</code>, but sideloaded data exists in the server response, Ember Data will simply use that data and not attempt to make another request. This is useful, allowing data to be sideloaded for a detail view because we know we&rsquo;re going to need it, but not for a list view where it might not be used. When moving from list to detail, the invoices will be loaded, but when arriving directly on the detail page, only the project will be loaded. Specify a different serializer in Rails for each action:</p>

<p>``` ruby app/controllers/projects_controller.rb
class ProjectsController &lt; ApplicationController
  respond_to :json</p>

<p>  def index</p>

<pre><code>respond_with Project.all, each_serializer: LazyProjectSerializer
</code></pre>

<p>  end</p>

<p>  def show</p>

<pre><code>respond_with Project.find(params[:id])
</code></pre>

<p>  end
end
```</p>

<h3>Async Loading From Links</h3>

<p>Another possibility, which gives more control over association endpoints, and avoids having to pass a bunch of IDs around, is to provide links for the relationships in the JSON response. For example:</p>

<p>``` ruby app/serializers/project_serializer.rb
class ProjectSerializer &lt; ActiveModel::Serializer
  attributes :id, :name, :links</p>

<p>  def links</p>

<pre><code>{ invoices: project_invoices_path(id) }
</code></pre>

<p>  end
end
```</p>

<h2>Loading Partial Models</h2>

<p>Imagine that we have a dropdown list of projects in the page navbar. In addition to lazy loading related data, we might also want to omit attributes we know we&rsquo;re not going to need yet. In this case a large project description might be a candidate for ommission from the list view, especially if the list of projects is large. The most comprehensive description of this problem I was able to find is <a href="http://discuss.emberjs.com/t/loading-partial-models-then-filling-them-with-ember-data/819">here</a>, and includes links to related discussions.</p>

<p>Firstly we need to identify the list data as partial by adding a <code>partial</code> attribute and setting it in a <code>PartialProjectSerializer</code>. We also ommit the invoices and description:</p>

<p><code>coffeescript app/assets/javascripts/models/project.js.coffee
App.Project = DS.Model.extend
  name: DS.attr('string')
  description: DS.attr('string')
  partial: DS.attr('boolean')
  invoices: DS.hasMany('invoice', { async: true })
</code></p>

<p>``` ruby app/serializers/partial_project_serializer.rb
class PartialProjectSerializer &lt; ApplicationSerializer
  attributes :id, :name, :partial</p>

<p>  def partial</p>

<pre><code>true
</code></pre>

<p>  end
end
```</p>

<p>We now have two problems to solve:</p>

<ol>
<li>Reload a complete model for the detail view if we have only a partial model.</li>
<li>Don&rsquo;t allow partial list data to overwrite a complete model if it comes in afterwards. You can simulate this in your dev environment using a threaded web server such as Puma and setting a delay on the resource index.</li>
</ol>


<p>For the first we can use <code>setupController</code> on the project route. Modifying the <code>model</code> hook won&rsquo;t work when a model is passed for example to <code>link-to</code> because it <a href="http://emberjs.com/guides/routing/asynchronous-routing/#toc_beforemodel-and-aftermodel">doesn&rsquo;t get called</a>.</p>

<p>``` coffeescript app/assets/javascripts/routes/project_route.js.coffee
Facture.ProjectRoute = Ember.Route.extend
  model: (params) &ndash;></p>

<pre><code>@store.find 'project', params.project_id
</code></pre>

<p>  setupController: (controller, model) &ndash;></p>

<pre><code># If the model is partial, we'll refresh it (from the full project resource)
model.reload() if model.get 'partial'
controller.set 'model', model
</code></pre>

<p>```</p>

<p>It would be nice if we could solve the second problem by asking Ember Data to retrieve and <em>merge</em> data from the server (using something like <code>Store#find_and_update</code>), but that doesn&rsquo;t appear to be possible. It is however possible to update individual records using <a href="http://emberjs.com/api/data/classes/DS.Store.html#method_update"><code>Store#update</code></a>.</p>

<p>I&rsquo;ve been getting these projects in the <code>ApplicationRoute</code>, which now looks like this:</p>

<p>``` coffeescript app/assets/javascripts/routes/application.js.coffee
Facture.ApplicationRoute = Ember.Route.extend
  setupController: (controller) &ndash;></p>

<pre><code>$.getJSON '/projects.json', (data) =&gt;
  # Update records in the store
  projects = data['projects'].map (project) =&gt;
    # Don't merge partial=true
    if existing_project = @store.getById('project', project.id)
      project.partial = false unless existing_project.get('partial')

    @store.update 'project', project

  # Set all records on the controller
  controller.set 'projects', projects
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails &amp; PHP Session Sharing #2]]></title>
    <link href="http://watsonbox.github.com/blog/2012/07/24/rails-and-php-session-sharing-number-2/"/>
    <updated>2012-07-24T16:37:00+02:00</updated>
    <id>http://watsonbox.github.com/blog/2012/07/24/rails-and-php-session-sharing-number-2</id>
    <content type="html"><![CDATA[<p>Back in May I <a href="/blog/2012/05/01/sharing-session-between-rails-and-php/">posted</a> on how I set up shared sessions between Rails and a legacy PHP app. Since then I&rsquo;ve upgraded memcache-client to Mike Perham&rsquo;s replacement, <a href="https://github.com/mperham/dalli/">Dalli</a>. I took this opportunity to tidy up the PHP session store as well. Here is what I have now:</p>

<p><div><script src='https://gist.github.com/3170415.js'></script>
<noscript><pre><code>require 'action_dispatch/middleware/session/dalli_store'

# - PHP side is 5.3.6 configured with session.save_handler = memcache
# - Requires php-serialize gem for serialization: https://github.com/jqr/php-serialize
module ActionDispatch
  module Session
    class PhpDalliStore &lt; ActionDispatch::Session::DalliStore
      require 'php_serialize'

      class PhpSerializingPoolDecorator &lt; SimpleDelegator
        def set(key, value, ttl = nil, options = nil)
          super(key, PHP.serialize_session(value), 0, :raw =&gt; true)
        end

        def get(key, options = nil)
          value = super(key)
          PHP.unserialize(value) if value &amp;&amp; value != ''
        end
      end

      def initialize(app, options = {})
        # Default to no namespace and cookie name matching PHP settings
        super(app, options.merge(:namespace =&gt; nil, :key =&gt; 'PHPSESSID'))

        # Decorate the pool to do some serialization
        @pool = PhpSerializingPoolDecorator.new(@pool)
      end
    end
  end
end</code></pre></noscript></div>
</p>

<p>This is cleaner than what I had before and should be much more resistant to changes in Dalli, too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sharing session between Rails and PHP]]></title>
    <link href="http://watsonbox.github.com/blog/2012/05/01/sharing-session-between-rails-and-php/"/>
    <updated>2012-05-01T13:07:00+02:00</updated>
    <id>http://watsonbox.github.com/blog/2012/05/01/sharing-session-between-rails-and-php</id>
    <content type="html"><![CDATA[<p><em>Update: Here&rsquo;s a <a href="/blog/2012/07/24/rails-and-php-session-sharing-number-2/">more elegant solution</a> which uses Dalli instead of memcache-client.</em></p>

<p>Sometimes Rails and PHP applications must live side by side in harmony, which can mean sharing session data between them. Here&rsquo;s one way this can be achieved with very little modification on the PHP side. First make sure your PHP application is using <a href="http://memcached.org/">memcached</a> for session storage:</p>

<p><code>ini php.ini
session.save_handler = memcache
session.save_path = "tcp://localhost:11211"
</code></p>

<p>If you&rsquo;re interested in seeing how the PHP data gets serialized, take the value of the <code>PHPSESSID</code> cookie and perform a <code>GET</code> request in a memcached telnet session:</p>

<p><code>bash
$ telnet localhost 11211
Trying ::1...
Connected to localhost.
Escape character is '^]'.
get a29ajb8go3bkm6r6k2qu4hv3d5
VALUE a29ajb8go3bkm6r6k2qu4hv3d5 0 298
state|s:32:"hgc8cf6e737b4f28ca9872ghe059577b";access_token|s:113:"AAACldPr8ZAokBAFmih7MCYhTlrOSmz7Ro3wJrZCVLeZCkrpQGhSL5hy4dRjYXikOjaBWbt2GJkjcpQj6MpJIopZBU3vURpVfJZBHKZAb7MyQZDZD";user_id|i:100000123456789;LAST_FACEBOOK_IDENTITY_CHECK|s:10:"1334154070";LAST_FACEBOOK_OAUTH_CHECK|s:10:"1334154070";
END
</code></p>

<p>There are a few Ruby libraries out there which can speak the language of PHP serialization. I&rsquo;ve chosen Thomas Hurst&rsquo;s <a href="https://github.com/watsonbox/php-serialize">php-serialize</a>. Note that I&rsquo;ve linked to my fork which also supports <code>.</code> characters in array keys. Add that to your Gemfile, and then include the following middleware in your Rails application.</p>

<p><div><script src='https://gist.github.com/2367946.js'></script>
<noscript><pre><code># Overrides functionality in Rack::Session::Memcache from Rack 1.4.1 to support sharing PHP sessions
# - PHP side is 5.3.6 configured with session.save_handler = memcache
# - Requires php-serialize gem for serialization: https://github.com/jqr/php-serialize

module ActionDispatch
  module Session
    class PhpSessionStore &lt; ActionDispatch::Session::MemCacheStore
      require 'php_serialize'
      
      def initialize(app, options = {})
        require 'memcache'
        options[:expire_after] ||= options[:expires]
        
        # Default to no namespace and cookie name matching PHP settings
        super(app, options.merge(:namespace =&gt; nil, :key =&gt; 'PHPSESSID'))
      end
      
      def get_session(env, sid)
        with_lock(env, [nil, {}]) do
          unless session = deserialize_session(sid)
            sid, session = generate_sid, {}
            
            unless /^STORED/ =~ @pool.add(sid, PHP.serialize_session(session), 0, true)
              raise &quot;Session collision on '#{sid.inspect}'&quot;
            end
          end
          [sid, session]
        end
      end
      
      def set_session(env, session_id, new_session, options)
        expiry = options[:expire_after]
        expiry = expiry.nil? ? 0 : expiry + 1

        with_lock(env, false) do
          @pool.set session_id, PHP.serialize_session(new_session), expiry, true
          session_id
        end
      end

      protected

      def deserialize_session(session_id)
        if session_id
          raw_session = @pool.get(session_id, true)

          if raw_session &amp;&amp; raw_session != ''
            PHP.unserialize(raw_session)
          end
        end
      end
    end
  end
end</code></pre></noscript></div>
</p>

<p>Now you can use this session store in <code>session_store.rb</code>:</p>

<p><code>
YourApp::Application.config.session_store :php_session_store, :expire_after =&gt; 10.minutes
</code></p>

<p>That&rsquo;s it, your applications should both now be able to seamlessly access the same session data.</p>
]]></content>
  </entry>
  
</feed>
