<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://watsonbox.github.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://watsonbox.github.com/" rel="alternate" type="text/html" /><updated>2024-09-04T18:39:50+02:00</updated><id>https://watsonbox.github.com/feed.xml</id><title type="html">Watsonbox</title><subtitle>Watsonbox Blog
</subtitle><author><name>Howard Wilson</name><email>howard@watsonbox.net</email></author><entry><title type="html">Exportify 2024 Updates</title><link href="https://watsonbox.github.com/posts/2024/09/04/exportify-updates.html" rel="alternate" type="text/html" title="Exportify 2024 Updates" /><published>2024-09-04T18:00:00+02:00</published><updated>2024-09-04T18:00:00+02:00</updated><id>https://watsonbox.github.com/posts/2024/09/04/exportify-updates</id><content type="html" xml:base="https://watsonbox.github.com/posts/2024/09/04/exportify-updates.html">&lt;p&gt;&lt;a href=&quot;https://watsonbox.github.io/posts/2020/12/02/exportify-refresh.html&quot;&gt;Last time&lt;/a&gt; I made a series of updates the focus was mainly on the technical stack, bugs and robustness. This time I‚Äôve put more effort into delivering all the features you‚Äôve requested since then, plus some of my own! Hopefully you‚Äôll find that these changes make &lt;a href=&quot;http://exportify.app&quot;&gt;Exportify&lt;/a&gt; a more useable and mature tool.&lt;/p&gt;

&lt;h2 id=&quot;-dark-mode&quot;&gt;üåì Dark mode&lt;/h2&gt;

&lt;p&gt;The new &lt;a href=&quot;https://getbootstrap.com/docs/5.3/customize/color-modes/&quot;&gt;Color modes support&lt;/a&gt; in Bootstrap 5.3 made this much easier, so I thought, why not! I‚Äôm pretty pleased with the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Exportify%20Dark%20Mode.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-internationalization&quot;&gt;üó∫ Internationalization&lt;/h2&gt;

&lt;p&gt;This one was &lt;a href=&quot;https://github.com/watsonbox/exportify/issues/102&quot;&gt;requested&lt;/a&gt; some years ago, and I admit at first I was hesitant because of how it might slow down development. In the end, though, I was curious about the implementation, so I decided to build it after all. At this point the feature set is pretty stable, so I hope that the benefit it brings to users will easily outweigh the impact on development time.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Exportify%20Internationalization.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A few notes on this feature:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CSV file headings have also been translated.&lt;/li&gt;
  &lt;li&gt;In future I might add features which fall back to English, relying on &lt;a href=&quot;https://github.com/watsonbox/exportify/pulls&quot;&gt;community contributions&lt;/a&gt; to bring languages up to date üôè.&lt;/li&gt;
  &lt;li&gt;The translations I‚Äôve added are AI generated so will almost certainly need tweaks, but hopefully serve as a good starting point.&lt;/li&gt;
  &lt;li&gt;The 8 initially supported languages are roughly the most used ones &lt;a href=&quot;https://github.com/watsonbox/exportify/pull/179&quot;&gt;according to Spotify&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are: English, French (Fran√ßais), Spanish (Espa√±ol), Italian (Italiano), German (Deutsch), Portuguese (Portugu√™s), Swedish (Svenska), and Dutch (Nederlands).&lt;/p&gt;

&lt;h2 id=&quot;-search-enhancements&quot;&gt;üîç Search enhancements&lt;/h2&gt;

&lt;p&gt;This feature has two main components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It‚Äôs now possible to click ‚ÄúExport All‚Äù to export the results of any search, with no upper limit.&lt;/li&gt;
  &lt;li&gt;There is a new advanced syntax for searching by owner, public and collaborative status.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Exportify%20Advanced%20Search.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;many-other-smaller-updates&quot;&gt;Many other smaller updates&lt;/h2&gt;

&lt;p&gt;As on previous major updates, I also took this opportunity to refresh almost all of the project technical dependencies, so it‚Äôs now running on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://react.dev/&quot;&gt;React 18.3&lt;/a&gt; - JavaScript library for building user interfaces&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://getbootstrap.com/&quot;&gt;Bootstrap 5.3&lt;/a&gt; - Styling and UI components&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fontawesome.com/&quot;&gt;Font Awesome 6.6&lt;/a&gt; - Vector icon set and toolkit&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript 5.5&lt;/a&gt; - JavaScript with syntax for types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many other tweaks too, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improved mobile usability&lt;/li&gt;
  &lt;li&gt;Better loading indicators&lt;/li&gt;
  &lt;li&gt;A full migration to TypeScript&lt;/li&gt;
  &lt;li&gt;Exporting playlists with the same name&lt;/li&gt;
  &lt;li&gt;New CSV fields&lt;/li&gt;
  &lt;li&gt;Several bug fixes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you‚Äôd like to dig deeper into the details of all the small updates as well as those mentioned above, you can find them on the Github &lt;a href=&quot;https://github.com/watsonbox/exportify/milestone/2?closed=1&quot;&gt;August 2024 Refresh milestone&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;exportifies&quot;&gt;Exportifies?&lt;/h2&gt;

&lt;p&gt;I must confess to being a little disappointed that Exportify has now fragmented into two versions, and that the existence of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exportify.net&lt;/code&gt; serves to position the fork as the ‚Äúcanonical‚Äù version. I would have much preferred for community efforts on improving it to be concentrated in one place, and for my own continued efforts and new features to remain discoverable. That‚Äôs open source though, and of course two versions are better than none üôÇ.&lt;/p&gt;

&lt;p&gt;Exportify remains a labour of love for me: an interesting side-project which also helps me to keep my front-end development skills up to date. While marketing isn‚Äôt my focus, I hope despite that it will continue to be useful for those who could benefit from it.&lt;/p&gt;

&lt;p&gt;With future discoverability in mind, I reluctantly registered &lt;a href=&quot;http://exportify.app&quot;&gt;http://exportify.app&lt;/a&gt; (the old link will still work).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And with that, I hope you enjoy these new features!&lt;/strong&gt;&lt;/p&gt;</content><author><name>Howard Wilson</name></author><category term="posts" /><category term="Exportify" /><category term="Spotify" /><category term="Javascript" /><category term="React" /><summary type="html">Last time I made a series of updates the focus was mainly on the technical stack, bugs and robustness. This time I‚Äôve put more effort into delivering all the features you‚Äôve requested since then, plus some of my own! Hopefully you‚Äôll find that these changes make Exportify a more useable and mature tool. üåì Dark mode The new Color modes support in Bootstrap 5.3 made this much easier, so I thought, why not! I‚Äôm pretty pleased with the result: üó∫ Internationalization This one was requested some years ago, and I admit at first I was hesitant because of how it might slow down development. In the end, though, I was curious about the implementation, so I decided to build it after all. At this point the feature set is pretty stable, so I hope that the benefit it brings to users will easily outweigh the impact on development time.</summary></entry><entry><title type="html">Home Lab SSD Encryption</title><link href="https://watsonbox.github.com/posts/2024/02/19/home-lab-ssd-encryption.html" rel="alternate" type="text/html" title="Home Lab SSD Encryption" /><published>2024-02-19T22:30:00+01:00</published><updated>2024-02-19T22:30:00+01:00</updated><id>https://watsonbox.github.com/posts/2024/02/19/home-lab-ssd-encryption</id><content type="html" xml:base="https://watsonbox.github.com/posts/2024/02/19/home-lab-ssd-encryption.html">&lt;p&gt;Recently I rebuilt a home server which acts as a NAS for my personal data. I wanted to make sure the data would be secure in the event of the server being stolen, ideally with:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Reasonably secure encryption (targeted attacks will get the data one way or another)&lt;/li&gt;
  &lt;li&gt;Low performance overhead, since the machine isn‚Äôt high spec&lt;/li&gt;
  &lt;li&gt;The ability to be unlocked remotely in the event of a power outage&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;Once I started to consider different options, I was surprised to discover that not only are almost all modern SSDs actually ‚ÄúSelf-Encrypting Drives‚Äù (SEDs) - meaning that they come with support for hardware full-disk encryption - but that this encryption is always active. From &lt;a href=&quot;https://wiki.archlinux.org/title/Self-encrypting_drives&quot;&gt;ArchWiki&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In fact, in drives featuring full-disk encryption, data is always encrypted with the data encryption key when stored to disk, even if there is no password set (e.g. a new drive). Manufacturers do this to make it easier for users who do not wish to enable the security features of the self-encrypting drive. These self-encrypting drives can be thought of as having a zero-length password by default that always transparently encrypts the data (similar to how passwordless SSH keys can provide somewhat secure access without user intervention).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;security&quot;&gt;Security&lt;/h3&gt;

&lt;p&gt;SEDs conforming to TCG Opal 2.0 use 128-bit block sizes with 128-bit and 256-bit AES keys. Also, by encrypting data at the hardware level, these drives are less vulnerable to software-based attacks.&lt;/p&gt;

&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt;

&lt;p&gt;Hardware encryption means that it‚Äôs the drive performing the encryption/decryption, not the CPU, so there is no performance overhead. Furthermore, the advertised read/write performance of the SSD isn‚Äôt impacted either since the encryption takes place whether or not it‚Äôs used to secure the data.&lt;/p&gt;

&lt;h2 id=&quot;remote-unlock--setup&quot;&gt;Remote Unlock &amp;amp; Setup&lt;/h2&gt;

&lt;p&gt;I expected this to be the trickiest part of my requirements to satisfy, but once I came across &lt;a href=&quot;https://github.com/Jip-Hop/sedunlocksrv-pba&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sedunlocksrv-pba&lt;/code&gt;&lt;/a&gt;, it turned out to be quite straightforward:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fully encrypt your home server or NAS and conveniently unlock it on startup without the need to attach monitor and keyboard. Unlocking can be done from any device on your LAN with a browser. By default a self-signed HTTPS certificate is used (generated during building) to secure the unlocking.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To get things set up, I suggest first verifying that you have a TGC OPAL-compatible SED drive by following &lt;a href=&quot;https://sedutil.com/&quot;&gt;the instructions on sedutil.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next prepare the PBA image &lt;a href=&quot;https://github.com/Jip-Hop/sedunlocksrv-pba?tab=readme-ov-file#building-with-docker&quot;&gt;with docker&lt;/a&gt; (there are other build methods available). This is the custom image containing a remotely accessible web interface for unlocking the SED drive on boot. Personally, I opted to use the &lt;a href=&quot;https://github.com/ChubbyAnt/sedutil&quot;&gt;ChubbyAnt fork&lt;/a&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sedutil&lt;/code&gt; and enable SSH unlocking in addition to web-based.&lt;/p&gt;

&lt;p&gt;This required a change to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;language-Dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --platform=amd64 ubuntu:22.04&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; DEBIAN_FRONTEND=noninteractive&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; cpio curl dosfstools dropbear fdisk git golang-go grub-efi-amd64-bin grub-efi-ia32-bin grub-pc-bin grub2-common libarchive-tools rsync squashfs-tools udev wget xorriso

&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /tmp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . .&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Changed line&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; SEDUTIL_FORK=&quot;ChubbyAnt&quot; ./build.sh SSH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then the process was:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:Jip-Hop/sedunlocksrv-pba.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;sedunlocksrv-pba
vi ssh/authorized_keys &lt;span class=&quot;c&quot;&gt;# Add public key as per ssh/authorized_keys.example&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sedunlocksrv-pba&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker &lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;:/tmp/sedunlocksrv-pba.img sedunlocksrv-pba.img&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; docker &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Output after image build and PBA compilation&lt;/span&gt;
Successfully copied 43MB to /home/dietpi/src/sedunlocksrv-pba/sedunlocksrv-pba.img
sedunlocksrv-pba
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once that‚Äôs complete, the &lt;a href=&quot;https://github.com/Jip-Hop/sedunlocksrv-pba?tab=readme-ov-file#encrypting-your-drive-and-flashing-the-pba&quot;&gt;next steps&lt;/a&gt; describe how to configure a password for the SED drive, enable locking, and finally flash the PBE image created above from a USB drive into the shadow master boot record (MBR) of the drive in question. Obviously it goes without saying that you should back up the data on the drive first, just in case.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Here‚Äôs how it works once everything‚Äôs set up:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The server powers up and detects that the SED drive is locked, so boots the PBA image from the shadow MBR.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The PBA then starts simple web interface and SSH server. By default a self-signed HTTPS certificate is used.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/SED Unlock Server.png&quot; alt=&quot;Audiobookshelf Voice Notes&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The router or firewall can be configured to forward traffic to the IP of the machine in question, making it publically accessible for entering the password. Alternatively, the router (or another machine on the network which comes online after a power failure) could be configured to join a VPN, providing more secure external access.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Entering the password and clicking reboot unlocks the drive and reboots using the actual MBR into whatever OS is installed. The drive will stay unlocked until the next power cycle.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; setting the same password for multiple drives allows them all to be unlocked in one go.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;final-notes&quot;&gt;Final Notes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The specific machine I was configuring was a Mac Mini 2012. That needs &lt;a href=&quot;https://smackerelofopinion.blogspot.com/2011/09/mac-mini-rebooting-tweaks-setpci-s-01f0.html&quot;&gt;a small modification&lt;/a&gt; to ensure that it would boots up when power is restored: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setpci -s 0:1f.0 0xa4.b=0&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I‚Äôd love to extend this solution to support exposing the web interface onto a Tailscale tailnet. Others have &lt;a href=&quot;https://tavianator.com/2022/remote_reboots.html#tailscale&quot;&gt;had success with this&lt;/a&gt; for remote boots using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkinitcpio&lt;/code&gt; hooks.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Howard Wilson</name></author><category term="posts" /><category term="Home Lab" /><summary type="html">Recently I rebuilt a home server which acts as a NAS for my personal data. I wanted to make sure the data would be secure in the event of the server being stolen, ideally with: Reasonably secure encryption (targeted attacks will get the data one way or another) Low performance overhead, since the machine isn‚Äôt high spec The ability to be unlocked remotely in the event of a power outage Solution Once I started to consider different options, I was surprised to discover that not only are almost all modern SSDs actually ‚ÄúSelf-Encrypting Drives‚Äù (SEDs) - meaning that they come with support for hardware full-disk encryption - but that this encryption is always active. From ArchWiki: In fact, in drives featuring full-disk encryption, data is always encrypted with the data encryption key when stored to disk, even if there is no password set (e.g. a new drive). Manufacturers do this to make it easier for users who do not wish to enable the security features of the self-encrypting drive. These self-encrypting drives can be thought of as having a zero-length password by default that always transparently encrypts the data (similar to how passwordless SSH keys can provide somewhat secure access without user intervention).</summary></entry><entry><title type="html">Exportify Refresh</title><link href="https://watsonbox.github.com/posts/2020/12/02/exportify-refresh.html" rel="alternate" type="text/html" title="Exportify Refresh" /><published>2020-12-02T18:00:00+01:00</published><updated>2020-12-02T18:00:00+01:00</updated><id>https://watsonbox.github.com/posts/2020/12/02/exportify-refresh</id><content type="html" xml:base="https://watsonbox.github.com/posts/2020/12/02/exportify-refresh.html">&lt;p&gt;Way back in 2015 I released the first version of &lt;a href=&quot;https://github.com/watsonbox/exportify&quot;&gt;Exportify&lt;/a&gt;, a small web application for exporting / backing up Spotify playlists to CSV format for safekeeping (click &lt;a href=&quot;https://watsonbox.github.io/exportify/&quot;&gt;here&lt;/a&gt; to go straight to the app if you‚Äôd like to try it).&lt;/p&gt;

&lt;p&gt;It‚Äôs fair to say I‚Äôve rather neglected this project over the past few years, so I decided to spend a good chunk of time this November on adding new features, fixing bugs and improving robustness, as well as a complete overhaul of the &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; dev stack.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/watsonbox/exportify&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/watsonbox/exportify/raw/3b95ee506b032b84078311c44ebbc79a165bf223/screenshot.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;new-features&quot;&gt;New Features&lt;/h2&gt;

&lt;p&gt;Although the technical stack refresh came first in order of work, it‚Äôs probably the new features that‚Äôll interest users the most.&lt;/p&gt;

&lt;p&gt;It‚Äôs important for me to say that in many cases these features came from &lt;a href=&quot;https://github.com/watsonbox/exportify/issues?q=is%3Aissue+is%3Aclosed&quot;&gt;the suggestions&lt;/a&gt; &lt;a href=&quot;https://github.com/watsonbox/exportify/pulls?q=is%3Apr+is%3Aclosed&quot;&gt;or contributions&lt;/a&gt; of others, so I did my best to work through old pull requests in order, and credit people wherever I could. Thanks to all who contributed üôè. The main updates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A new &lt;a href=&quot;https://github.com/watsonbox/exportify/pull/82&quot;&gt;playlist search facility&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/watsonbox/exportify/pull/80&quot;&gt;Artist and audio features&lt;/a&gt; as configurable extra data in exports&lt;/li&gt;
  &lt;li&gt;Possible to &lt;a href=&quot;https://github.com/watsonbox/exportify/pull/84&quot;&gt;change user&lt;/a&gt; (log out)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/watsonbox/exportify/commit/bc5253c7ad0687eaaaad4cb761d9a836dbcbed83&quot;&gt;Liked songs can be exported&lt;/a&gt; as a playlist&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/watsonbox/exportify/pull/75&quot;&gt;Complete revamp of rate limiting&lt;/a&gt; meaning that in most cases it‚Äôs not something users will need to worry about&lt;/li&gt;
  &lt;li&gt;Various miscellaneous bugs fixed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There‚Äôs loads more detail on each of those items and more in &lt;a href=&quot;https://github.com/watsonbox/exportify/milestone/1?closed=1&quot;&gt;the milestone&lt;/a&gt; over on Github, or of course in the &lt;a href=&quot;https://github.com/watsonbox/exportify&quot;&gt;project &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README&lt;/code&gt;&lt;/a&gt;. Hopefully these additions will improve the usefulness of the tool for the majority of use cases.&lt;/p&gt;

&lt;p&gt;Next let‚Äôs take a look at what‚Äôs changed under the hood.&lt;/p&gt;

&lt;h2 id=&quot;development-stack-overhaul&quot;&gt;Development Stack Overhaul&lt;/h2&gt;

&lt;p&gt;When I came to revisit the tech stack for this project, I wasn‚Äôt inspired at all to build on top of what I‚Äôd put together back in 2015. Okay, there was an automated test suite but coverage wasn‚Äôt particularly great and it would fail intermittently. There was no dependency management framework, and no development/production environment separation. The libraries I‚Äôd used were out of date and the React/JS world had moved on impressively since then.&lt;/p&gt;

&lt;p&gt;Starting with &lt;a href=&quot;https://github.com/facebook/create-react-app&quot;&gt;Create React App&lt;/a&gt; I ended up with the following tools/libs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://reactjs.org/&quot;&gt;React 17&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;A JavaScript library for building user interfaces&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://getbootstrap.com/&quot;&gt;Bootstrap 4&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Styling and UI components&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://fontawesome.com/&quot;&gt;Font Awesome 5&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Vector icon set and toolkit&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://testing-library.com/docs/react-testing-library/intro/&quot;&gt;React Testing Library&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Light-weight solution for testing React DOM nodes&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://mswjs.io/&quot;&gt;Mock Service Workers (MSW)&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Network-level request mocking (more of my own thoughts &lt;a href=&quot;https://watsonbox.github.io/posts/2020/11/30/discovering-msw.html&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It really was day and night to see how things evolved as I added in new components and upgraded others. In particular working with MSW was a much improved testing experience for a web request-heavy app. You can check out &lt;a href=&quot;https://watsonbox.github.io/posts/2020/11/30/discovering-msw.html&quot;&gt;my other blog post about my experience in setting it up&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The majority of this new stack was introduced as part of &lt;a href=&quot;https://github.com/watsonbox/exportify/pull/72&quot;&gt;this PR&lt;/a&gt;, so feel free to take a look if you‚Äôd like to dig into the code.&lt;/p&gt;

&lt;h3 id=&quot;development-confidence&quot;&gt;Development Confidence&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;One&lt;/em&gt; of the reasons I haven‚Äôt updated this project more over the years was: I was kind of worried about breaking things üò¨. As I see it, my recent changes now give me and contributors three lines of defense:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Writing code&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Moving to &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;Typescript&lt;/a&gt; for type checking, in their own words, ‚Äúsaves you time catching errors and providing fixes before you run code‚Äù.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Deploying code&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;The more comprehensive automated test suite using &lt;a href=&quot;https://testing-library.com/docs/react-testing-library/intro/&quot;&gt;React Testing Library&lt;/a&gt;, &lt;a href=&quot;https://jestjs.io/&quot;&gt;Jest&lt;/a&gt;, and &lt;a href=&quot;https://mswjs.io/&quot;&gt;MSW&lt;/a&gt; should give a lot more confidence that things aren‚Äôt breaking. Snapshot testing is now also present as a useful guard against regressions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Debugging live issues&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Those two measures clearly don‚Äôt catch everything. For the rest there‚Äôs live error monitoring with &lt;a href=&quot;https://www.bugsnag.com/&quot;&gt;Bugsnag&lt;/a&gt;. I‚Äôve &lt;a href=&quot;https://github.com/watsonbox/exportify/blob/7dbccd31f1d8595fd900374847d40542a6f39ae9/src/index.tsx#L9-L21&quot;&gt;configured it&lt;/a&gt; to make sure that no sensitive data leaks into the error reports, only the details of the exception itself. This also helps to answer questions like ‚Äúwhat percentage of distinct users experience an issue?‚Äù.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;future-development&quot;&gt;Future Development&lt;/h2&gt;

&lt;p&gt;A small note about my own personal vision when it comes to the feature set of this tool.&lt;/p&gt;

&lt;p&gt;While I‚Äôm always open to considering feature requests or code submissions, my own view is that they should remain focused on &lt;em&gt;getting data out of the Spotify Web API&lt;/em&gt; rather than on presenting it or importing it into other applications.&lt;/p&gt;

&lt;p&gt;It‚Äôs surely the case that there are plenty of interesting things that can be done with this data once it‚Äôs been exported, though. Let me know what you come up with! üëá&lt;/p&gt;</content><author><name>Howard Wilson</name></author><category term="posts" /><category term="Exportify" /><category term="Spotify" /><category term="Javascript" /><category term="React" /><summary type="html">Way back in 2015 I released the first version of Exportify, a small web application for exporting / backing up Spotify playlists to CSV format for safekeeping (click here to go straight to the app if you‚Äôd like to try it). It‚Äôs fair to say I‚Äôve rather neglected this project over the past few years, so I decided to spend a good chunk of time this November on adding new features, fixing bugs and improving robustness, as well as a complete overhaul of the React dev stack.</summary></entry><entry><title type="html">Discovering MSW</title><link href="https://watsonbox.github.com/posts/2020/11/30/discovering-msw.html" rel="alternate" type="text/html" title="Discovering MSW" /><published>2020-11-30T19:42:58+01:00</published><updated>2020-11-30T19:42:58+01:00</updated><id>https://watsonbox.github.com/posts/2020/11/30/discovering-msw</id><content type="html" xml:base="https://watsonbox.github.com/posts/2020/11/30/discovering-msw.html">&lt;p&gt;Recently, as part of a &lt;a href=&quot;https://github.com/watsonbox/exportify/pull/72&quot;&gt;development stack refresh&lt;/a&gt; for &lt;a href=&quot;https://github.com/watsonbox/exportify&quot;&gt;Exportify&lt;/a&gt;, I found myself digging around for the best approach to mocking HTTP requests in a JS test suite.&lt;/p&gt;

&lt;p&gt;I needed something that would play nicely with &lt;a href=&quot;https://jestjs.io/&quot;&gt;Jest&lt;/a&gt; and React, allow me to mock requests at the transport layer so my tests could be de-coupled from the HTTP request library I chose to use, as well as of course providing a convenient DSL for writing the tests themselves.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Previously I‚Äôd written my tests using &lt;a href=&quot;https://www.casperjs.org/&quot;&gt;CasperJS&lt;/a&gt;, and &lt;a href=&quot;https://github.com/jakerella/jquery-mockjax&quot;&gt;Mockjax&lt;/a&gt; for the request mocking. I‚Äôd found the test runs to be a little unreliable, plus CasperJS is no longer actively maintained and Mockjax only actually mocks the jQuery request API, which I also planned to replace during the refresh.&lt;/p&gt;

&lt;h2 id=&quot;enter-msw&quot;&gt;Enter MSW&lt;/h2&gt;

&lt;p&gt;I came across &lt;a href=&quot;https://mswjs.io/&quot;&gt;MSW&lt;/a&gt; (Mock Service Worker), which seemed to be the answer to my problems. It comes by default with &lt;a href=&quot;https://testing-library.com/docs/react-testing-library/intro&quot;&gt;React Testing Library&lt;/a&gt;, so I didn‚Äôt have to look very far üôÇ.&lt;/p&gt;

&lt;p&gt;This post isn‚Äôt a tutorial on how to use MSW: see the &lt;a href=&quot;https://mswjs.io/docs/&quot;&gt;documentation&lt;/a&gt; for that. Rather, it‚Äôs a collection of short summaries of what worked well (and didn‚Äôt!) for me.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-suite&quot;&gt;Setting up the Suite&lt;/h2&gt;

&lt;p&gt;At this point, if you‚Äôre curious and you‚Äôd like to skip ahead, you could check out &lt;a href=&quot;https://github.com/watsonbox/exportify/blob/master/src/components/PlaylistTable.test.jsx&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PlaylistTable.test.jsx&lt;/code&gt;&lt;/a&gt; for a complete example of how I set up the tests for the main React component in Exportify.&lt;/p&gt;

&lt;p&gt;The general approach there is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Set up the server which handles mocking&lt;/p&gt;

    &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setupServer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;msw/node&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handlers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;../mocks/handlers&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;

 &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setupServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

 &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Restore Jest mocks and MSW handlers after each test. This ensures that any contextual changes made for any specific test will be reset.&lt;/p&gt;

    &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nx&quot;&gt;afterEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;restoreAllMocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resetHandlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mocks/handlers.jsx&lt;/code&gt; with some request handlers, for example:&lt;/p&gt;

    &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handlers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://api.spotify.com/v1/me&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;watsonbox&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;external_urls&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;spotify&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://open.spotify.com/user/watsonbox&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;followers&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://api.spotify.com/v1/users/watsonbox&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;watsonbox&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;spotify:user:watsonbox&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;catching-unmocked-requests&quot;&gt;Catching Unmocked Requests&lt;/h2&gt;

&lt;p&gt;Most of my experience with mocking requests in test suites these days is using &lt;a href=&quot;https://github.com/bblimke/webmock&quot;&gt;WebMock&lt;/a&gt; with Ruby on the back end. More often than not, I want to ensure that no ‚Äúlive‚Äù requests are made. That is to say, I‚Äôd like like an unmocked request to be a test failure. In fact, I often use this as a process for writing the mocks themselves - running the test suite and mocking out one request at a time, validating that they make sense as I go.&lt;/p&gt;

&lt;p&gt;As luck would have it, &lt;a href=&quot;https://github.com/mswjs/msw/issues/191&quot;&gt;this feature&lt;/a&gt; was &lt;a href=&quot;https://github.com/mswjs/msw/pull/257&quot;&gt;merged&lt;/a&gt; in July this year, and can be switched on by updating the call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server.listen&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;onUnhandledRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay, this will warn rather than raise an error, but &lt;a href=&quot;https://mswjs.io/docs/api/setup-server/listen#onunhandledrequest&quot;&gt;there are other options available&lt;/a&gt;. If the example handler above were omitted, the output would be something like the following, and as expected it helps with writing the mocks themselves:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;console.warn
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;MSW] Warning: captured a GET https://api.spotify.com/v1/me request without a corresponding request handler.

    If you wish to intercept this request, consider creating a request handler &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;it:

    rest.get&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://api.spotify.com/v1/me'&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;req, res, ctx&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;res&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ctx.text&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great!&lt;/p&gt;

&lt;h2 id=&quot;contextual-mocks&quot;&gt;Contextual Mocks&lt;/h2&gt;

&lt;p&gt;After testing the ‚Äúhappy path‚Äù behavior, I‚Äôll typically want to set up a more exceptional response from the API. This is often the case when fixing bugs with a test to guard against regressions.&lt;/p&gt;

&lt;p&gt;A real example of this is needing to test a bug which only occurs when a Spotify playlist contains an item with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; track. The &lt;a href=&quot;https://github.com/watsonbox/exportify/commit/032ec7f246308a8acb74de2f70ba706141ad9fda&quot;&gt;full commit is here&lt;/a&gt; but the approach was to use a &lt;em&gt;&lt;a href=&quot;https://mswjs.io/docs/api/setup-server/use&quot;&gt;runtime request handler&lt;/a&gt;&lt;/em&gt; (&lt;a href=&quot;https://github.com/mswjs/msw/releases/tag/v0.18.0&quot;&gt;released in May&lt;/a&gt; üòå) to handle a request to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://api.spotify.com/v1/me&lt;/code&gt; differently for a single spec, as follows:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// At the top level&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nullTrackHandlers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;../mocks/handlers&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// New test&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;playlist with null track skips null track&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nullTrackHandlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// The test body&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In fact, this is the reason for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resetHandlers()&lt;/code&gt; call in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;afterEach&lt;/code&gt; callback above. It ensures that the runtime handler is removed after each test.&lt;/p&gt;

&lt;p&gt;Finally the mock itself must be added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handlers.jsx&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nullTrackHandlers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://api.spotify.com/v1/playlists/4XOGDpHMrVoH33uJEwHWU5/tracks?offset=0&amp;amp;limit=10&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://api.spotify.com/v1/playlists/4XOGDpHMrVoH33uJEwHWU5/tracks?offset=0&amp;amp;limit=100&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;added_at&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2020-11-08T22:12:50Z&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;added_by&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;external_urls&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;spotify&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://open.spotify.com/user/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
              &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://api.spotify.com/v1/users/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;spotify:user:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;is_local&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;primary_color&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The exceptional case&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;video_thumbnail&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;asserting-request-counts&quot;&gt;Asserting Request Counts&lt;/h2&gt;

&lt;p&gt;The next thing I came up against was wanting to know how many times a given API endpoint had been called. Setting up mocked responses and checking the results was already great, but how could I be sure that duplicate requests weren‚Äôt accidentally being fired resulting in the same behavior but with a performance overhead and exasperating rate limiting problems?&lt;/p&gt;

&lt;p&gt;Well, I couldn‚Äôt find anything out of the box so decided to use a pattern relying on &lt;a href=&quot;https://jestjs.io/docs/en/mock-functions&quot;&gt;standard Jest mock functions&lt;/a&gt; which can be used with any &lt;a href=&quot;https://jestjs.io/docs/en/expect&quot;&gt;expectation matchers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First add a mock to the handlers file and call it in each mock body:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handlerCalled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handlers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://api.spotify.com/v1/me&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;handlerCalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This can then be imported and used in the tests:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handlerCalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handlers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;../mocks/handlers&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handlerCalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveBeenCalledTimes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Actually, in my case I wanted to be sure that and API call had been called once &lt;em&gt;for a specific URL&lt;/em&gt;, so to avoid setting up a ‚Äúcall mock‚Äù for each mocked request, I typically ended up setting expectations this way:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handlerCalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Ensure API call order and no duplicates&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://api.spotify.com/v1/me&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://api.spotify.com/v1/users/watsonbox/playlists&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://api.spotify.com/v1/users/watsonbox/tracks&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://api.spotify.com/v1/me/tracks?offset=0&amp;amp;limit=20&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;matching-requests&quot;&gt;Matching Requests&lt;/h2&gt;

&lt;p&gt;Overall, my experience using Jest and MSW has been great, and I feel like I‚Äôm hitting the project at the right time since some of the features I‚Äôve needed haven‚Äôt been available for long!&lt;/p&gt;

&lt;p&gt;Probably the only niggle I had came in the restrictions when setting up the matching of mocked requests. As far as I can tell, setting up a mock like this:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://api.spotify.com/v1/playlists/4XOGDpHMrVoH33uJEwHWU5/tracks?offset=0&amp;amp;limit=10&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is equivalent to this (without query params):&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://api.spotify.com/v1/playlists/4XOGDpHMrVoH33uJEwHWU5/tracks&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In addition to certain parameters, I‚Äôd also love to be able to set up mocks which only match certain headers. That way I could set up all the mocks to match the correct Bearer token, and get warnings if that was for some reason not the case, plus perhaps set up some specific 401 responses for testing that behavior.&lt;/p&gt;</content><author><name>Howard Wilson</name></author><category term="posts" /><category term="Javascript" /><category term="React" /><category term="Exportify" /><summary type="html">Recently, as part of a development stack refresh for Exportify, I found myself digging around for the best approach to mocking HTTP requests in a JS test suite. I needed something that would play nicely with Jest and React, allow me to mock requests at the transport layer so my tests could be de-coupled from the HTTP request library I chose to use, as well as of course providing a convenient DSL for writing the tests themselves.</summary></entry><entry><title type="html">GooglePlacesAutocomplete CocoaPod</title><link href="https://watsonbox.github.com/blog/2015/02/16/googleplacesautocomplete-cocoapod/" rel="alternate" type="text/html" title="GooglePlacesAutocomplete CocoaPod" /><published>2015-02-16T17:45:42+01:00</published><updated>2015-02-16T17:45:42+01:00</updated><id>https://watsonbox.github.com/blog/2015/02/16/googleplacesautocomplete-cocoapod</id><content type="html" xml:base="https://watsonbox.github.com/blog/2015/02/16/googleplacesautocomplete-cocoapod/">&lt;p&gt;&lt;a href=&quot;https://github.com/watsonbox/ios_google_places_autocomplete&quot;&gt;GooglePlacesAutocomplete&lt;/a&gt; is a simple &lt;a href=&quot;https://developers.google.com/places/documentation/autocomplete&quot;&gt;Google Places API&lt;/a&gt; autocompleting address entry view for iOS devices, written in &lt;a href=&quot;https://developer.apple.com/swift/&quot;&gt;Swift&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are already a couple of solutions out there for this. GooglePlacesAutocomplete is different because it is 100% Swift, and aims to provide the simplest possible method of entering validated, autocompleted addresses.&lt;/p&gt;

&lt;p&gt;It‚Äôs available as a CocoaPod - installation instructions &lt;a href=&quot;https://github.com/watsonbox/ios_google_places_autocomplete#installation&quot;&gt;here&lt;/a&gt;. Feedback and contributions welcome!&lt;/p&gt;

&lt;h3 id=&quot;screenshots&quot;&gt;Screenshots&lt;/h3&gt;

&lt;p&gt;&lt;img width=&quot;300&quot; src=&quot;https://raw.githubusercontent.com/watsonbox/ios_google_places_autocomplete/master/Screenshots/view.png&quot; /&gt;¬†¬†¬†¬†&lt;img width=&quot;300&quot; src=&quot;https://raw.githubusercontent.com/watsonbox/ios_google_places_autocomplete/master/Screenshots/search.png&quot; /&gt;&lt;/p&gt;</content><author><name>Howard Wilson</name></author><category term="posts" /><category term="iOS" /><category term="Swift" /><category term="XCode" /><category term="CocoaPods" /><summary type="html">GooglePlacesAutocomplete is a simple Google Places API autocompleting address entry view for iOS devices, written in Swift. There are already a couple of solutions out there for this. GooglePlacesAutocomplete is different because it is 100% Swift, and aims to provide the simplest possible method of entering validated, autocompleted addresses. It‚Äôs available as a CocoaPod - installation instructions here. Feedback and contributions welcome! Screenshots ¬†¬†¬†¬†</summary></entry><entry><title type="html">Ruby speech recognition with Pocketsphinx</title><link href="https://watsonbox.github.com/blog/2014/10/24/ruby-speech-recognition-with-pocketsphinx/" rel="alternate" type="text/html" title="Ruby speech recognition with Pocketsphinx" /><published>2014-10-24T15:42:02+02:00</published><updated>2014-10-24T15:42:02+02:00</updated><id>https://watsonbox.github.com/blog/2014/10/24/ruby-speech-recognition-with-pocketsphinx</id><content type="html" xml:base="https://watsonbox.github.com/blog/2014/10/24/ruby-speech-recognition-with-pocketsphinx/">&lt;p&gt;&lt;a href=&quot;https://github.com/watsonbox/pocketsphinx-ruby&quot;&gt;pocketsphinx-ruby&lt;/a&gt; is a high-level Ruby wrapper for the pocketsphinx C API. It uses the Ruby Foreign Function Interface (FFI) to directly load and call functions in libpocketsphinx, as well as libsphinxav for recoding live audio using a number of different audio backends.&lt;/p&gt;

&lt;p&gt;The goal of the project is to make it as easy as possible for the Ruby community to experiment with speech recognition, in particular for use in grammar-based command and control applications. Setting up a real time recognizer is as simple as:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pocketsphinx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Grammar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Go forward ten meters&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Go backward ten meters&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Pocketsphinx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LiveSpeechRecognizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recognize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speech&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speech&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This library supports Ruby MRI 1.9.3+, JRuby, and Rubinius. It depends on the current development versions of Pocketsphinx and Sphinxbase - there are &lt;a href=&quot;https://github.com/watsonbox/homebrew-cmu-sphinx&quot;&gt;Homebrew recipes&lt;/a&gt; available for a quick start on OSX.&lt;/p&gt;</content><author><name>Howard Wilson</name></author><category term="posts" /><category term="Ruby" /><category term="Speech Recognition" /><summary type="html">pocketsphinx-ruby is a high-level Ruby wrapper for the pocketsphinx C API. It uses the Ruby Foreign Function Interface (FFI) to directly load and call functions in libpocketsphinx, as well as libsphinxav for recoding live audio using a number of different audio backends. The goal of the project is to make it as easy as possible for the Ruby community to experiment with speech recognition, in particular for use in grammar-based command and control applications. Setting up a real time recognizer is as simple as: configuration = Pocketsphinx::Configuration::Grammar.new do sentence &quot;Go forward ten meters&quot; sentence &quot;Go backward ten meters&quot; end Pocketsphinx::LiveSpeechRecognizer.new(configuration).recognize do |speech| puts speech end This library supports Ruby MRI 1.9.3+, JRuby, and Rubinius. It depends on the current development versions of Pocketsphinx and Sphinxbase - there are Homebrew recipes available for a quick start on OSX.</summary></entry><entry><title type="html">Mean.io on Dokku</title><link href="https://watsonbox.github.com/blog/2014/09/22/mean-dot-io-on-dokku/" rel="alternate" type="text/html" title="Mean.io on Dokku" /><published>2014-09-22T12:32:41+02:00</published><updated>2014-09-22T12:32:41+02:00</updated><id>https://watsonbox.github.com/blog/2014/09/22/mean-dot-io-on-dokku</id><content type="html" xml:base="https://watsonbox.github.com/blog/2014/09/22/mean-dot-io-on-dokku/">&lt;p&gt;Here‚Äôs how I set up the &lt;a href=&quot;http://mean.io/&quot;&gt;Mean.io&lt;/a&gt; stack for deployment with &lt;a href=&quot;https://github.com/progrium/dokku&quot;&gt;Dokku&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Set up MongoDB on the Dokku host and create a database. I used Jeff Utter‚Äôs single container &lt;a href=&quot;https://github.com/jeffutter/dokku-mongodb-plugin&quot;&gt;plugin&lt;/a&gt; for this.&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dokku mongodb:start
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dokku mongodb:create &amp;lt;app&amp;gt; &amp;lt;database&amp;gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dokku mongodb:link &amp;lt;app&amp;gt; &amp;lt;database&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Modify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/env/production.js&lt;/code&gt; to use ENV var for MongoDB URL:&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;use strict&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MONGO_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// [REST OF FILE ELIDED]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Configure the application to run in the production environment:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dokku config:set &amp;lt;app&amp;gt; &lt;span class=&quot;nv&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set the unsafe-perm npm configuration option to allow npm to operate under the root account. More information &lt;a href=&quot;https://github.com/progrium/dokku/wiki/Troubleshooting&quot;&gt;here&lt;/a&gt;. Create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.npmrc&lt;/code&gt; as follows:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unsafe-perm &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Configure a &lt;a href=&quot;https://github.com/mbuchetics/heroku-buildpack-nodejs-grunt&quot;&gt;buildpack which supports Grunt&lt;/a&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.env&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;BUILDPACK_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://github.com/mbuchetics/heroku-buildpack-nodejs-grunt.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add Heroku build task without environment to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gruntfile.js&lt;/code&gt; since Dokku doesn‚Äôt read config during build steps:&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c1&quot;&gt;// [REST OF FILE ELIDED]&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// For Heroku users only.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Docs: https://github.com/linnovate/mean/wiki/Deploying-on-Heroku&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;heroku:production&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;cssmin&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;uglify&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Dokku does not set ENV vars during build steps:&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;heroku:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;cssmin&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;uglify&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Howard Wilson</name></author><category term="posts" /><category term="Docker" /><category term="Dokku" /><category term="Node.js" /><category term="Angular" /><category term="MongoDB" /><category term="Express" /><summary type="html">Here‚Äôs how I set up the Mean.io stack for deployment with Dokku.</summary></entry><entry><title type="html">Getting Started with Dokku</title><link href="https://watsonbox.github.com/blog/2014/08/31/getting-started-with-dokku/" rel="alternate" type="text/html" title="Getting Started with Dokku" /><published>2014-08-31T14:35:02+02:00</published><updated>2014-08-31T14:35:02+02:00</updated><id>https://watsonbox.github.com/blog/2014/08/31/getting-started-with-dokku</id><content type="html" xml:base="https://watsonbox.github.com/blog/2014/08/31/getting-started-with-dokku/">&lt;p&gt;&lt;em&gt;UPDATE: Some recent changes to &lt;a href=&quot;https://github.com/ohardy/dokku-mariadb&quot;&gt;ohardy/dokku-mariadb&lt;/a&gt; have resolved the problems with losing DB links on reboot.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I decided to jump in and set up my own mini-Heroku with &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; and &lt;a href=&quot;https://github.com/progrium/dokku&quot;&gt;Dokku&lt;/a&gt; as seems to be the fashion at the moment. Here are my thoughts and a few of the issues I hit along the way. Using Dokku v0.2.3.&lt;/p&gt;

&lt;p&gt;I &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-dokku-application&quot;&gt;installed Dokku on Digital Ocean&lt;/a&gt;. It doesn‚Äôt have to be Digital Ocean but they certainly make it easy. Then &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04&quot;&gt;added some swap space&lt;/a&gt;, too. Save some typing by setting up an alias:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dokku&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ssh -t dokku@yourvps.tld
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;configuration-variables&quot;&gt;Configuration Variables&lt;/h2&gt;

&lt;p&gt;Dokku allows applications to be configured using enviornment variables as described in the twelve-factor app:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dokku config:set acme &lt;span class=&quot;nv&quot;&gt;company_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Acme Corporation&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That won‚Äôt work though, because Dokku‚Äôs command line app &lt;a href=&quot;https://github.com/progrium/dokku/issues/482&quot;&gt;doesn‚Äôt support spaces in config variables&lt;/a&gt;. You can get around this by setting the configuration directly in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/dokku/acme/ENV&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;company_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Acme Corporation&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;They won‚Äôt be correctly reported by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dokku config acme&lt;/code&gt;, but they‚Äôll work.&lt;/p&gt;

&lt;h2 id=&quot;configuration-backup&quot;&gt;Configuration Backup&lt;/h2&gt;

&lt;p&gt;You can backup Dokku‚Äôs configuration (including application configuration) with:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dokku backup:export &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;FILE]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will place the backup in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/dokku/[FILE]&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;multiple-domains-and-basic-auth&quot;&gt;Multiple Domains and Basic Auth&lt;/h2&gt;

&lt;p&gt;I installed a couple of plugins which worked well out of the box:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/matto1990/dokku-secure-apps&quot;&gt;https://github.com/matto1990/dokku-secure-apps&lt;/a&gt;&lt;br /&gt;Secures an individual app with HTTP Basic authentication. Dead simple to use and useful when deploying apps for testing or private use only.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/neam/dokku-custom-domains&quot;&gt;https://github.com/neam/dokku-custom-domains&lt;/a&gt;&lt;br /&gt;Configure additional custom domains for your dokku app.&lt;/p&gt;

&lt;h2 id=&quot;persistent-storage&quot;&gt;Persistent Storage&lt;/h2&gt;

&lt;p&gt;Dokku has plenty of &lt;a href=&quot;https://github.com/progrium/dokku/wiki/Plugins#datastores&quot;&gt;plugins for different data stores&lt;/a&gt;. I decided to work with &lt;a href=&quot;https://github.com/ohardy/dokku-mariadb&quot;&gt;ohardy/dokku-mariadb&lt;/a&gt; since on a VPS with farily limited memory, I preferred to only run one container and a single instance of MariaDB.&lt;/p&gt;

&lt;p&gt;The main problem I faced here was keeping database connections working after a reboot. On reboot, docker containers are restarted and will receive a new private IP. This means that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DATABASE_URL&lt;/code&gt; used by the apps, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql://[PRIVATE_IP]:3306/[database]&lt;/code&gt; will change and break database connections. Despite some &lt;a href=&quot;https://github.com/Kloadut/dokku-pg-plugin/issues/12&quot;&gt;discussion&lt;/a&gt; and &lt;a href=&quot;https://github.com/Kloadut/dokku-md-plugin/commit/de26c1e10f1e30c059ae827fff65b4a132ccc2ed&quot;&gt;attempted fixes&lt;/a&gt;, the multiple container dokku MariaDB plugin (&lt;a href=&quot;https://github.com/Kloadut/dokku-md-plugin&quot;&gt;kloadut/dokku-md-plugin&lt;/a&gt;) uses a dynamic port for each container, which also changes on reboot, so suffers from the same problem.&lt;/p&gt;

&lt;p&gt;I fixed this issue in &lt;a href=&quot;https://github.com/watsonbox/dokku-mariadb/commit/ab724e99f49968695da3a0ce09fe7582bf735328&quot;&gt;watsonbox/dokku-mariadb:reboot-persist-connections&lt;/a&gt; by patching ohardy/dokku-mariadb to use a fixed IP address. It also uses a fixed port (3306), since only one container/instance is created.&lt;/p&gt;

&lt;p&gt;Worth noting that ohardy/dokku-mariadb stores persistent DB data on the host in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/dokku/.o_mariadb&lt;/code&gt; (kloadut/dokku-md-plugin in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/dokku/.mariadb&lt;/code&gt;).&lt;/p&gt;</content><author><name>Howard Wilson</name></author><category term="posts" /><category term="Docker" /><category term="Dokku" /><summary type="html">UPDATE: Some recent changes to ohardy/dokku-mariadb have resolved the problems with losing DB links on reboot. I decided to jump in and set up my own mini-Heroku with Docker and Dokku as seems to be the fashion at the moment. Here are my thoughts and a few of the issues I hit along the way. Using Dokku v0.2.3. I installed Dokku on Digital Ocean. It doesn‚Äôt have to be Digital Ocean but they certainly make it easy. Then added some swap space, too. Save some typing by setting up an alias: $ alias dokku='ssh -t dokku@yourvps.tld</summary></entry><entry><title type="html">Aggregation for Ember Data Async Relationships</title><link href="https://watsonbox.github.com/blog/2014/06/23/aggregation-for-ember-data-async-relationships/" rel="alternate" type="text/html" title="Aggregation for Ember Data Async Relationships" /><published>2014-06-23T17:12:21+02:00</published><updated>2014-06-23T17:12:21+02:00</updated><id>https://watsonbox.github.com/blog/2014/06/23/aggregation-for-ember-data-async-relationships</id><content type="html" xml:base="https://watsonbox.github.com/blog/2014/06/23/aggregation-for-ember-data-async-relationships/">&lt;p&gt;Ember.js has &lt;a href=&quot;http://emberjs.com/guides/object-model/computed-properties-and-aggregate-data/&quot;&gt;computed properties&lt;/a&gt; for aggregating data which are automatically re-calculated when the source data set changes. But what if we want to display aggregate data from an async relationship in a list view? We might have the following:&lt;/p&gt;

&lt;div class=&quot;language-coffeescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Invoice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;extend&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;lineItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lineItem'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;lineItemAmounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lineItems'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'amount'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lineItemAmounts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App.Invoice&lt;/code&gt; has a bunch of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App.LineItem&lt;/code&gt;s, and calculates its own amount by summing up their individual amounts. However, each time an invoice is rendered, all of the line items will be fetched from the server in order to make this calculation.&lt;/p&gt;

&lt;p&gt;What we can do instead is send the aggregate figure from the server along with the invoice. It might be calculated on the fly (with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group by&lt;/code&gt; query, for example), or maintained along with the invoice. Here‚Äôs an approach that does exactly this, but will switch to using the real ember data objects once they have been loaded:&lt;/p&gt;

&lt;div class=&quot;language-coffeescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Invoice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;extend&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;subtotal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;lineItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lineItem'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;lineItemAmounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lineItems'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'amount'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;lineItemAmountsSum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lineItemAmounts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Uses subtotal until async lineItems become available&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cacheFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lineItems'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lineItemAmountsSum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'subtotal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lineItems.@each.amount'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subtotal&lt;/code&gt; is the aggregated amount from the server.&lt;/p&gt;</content><author><name>Howard Wilson</name></author><category term="posts" /><category term="Ember.js" /><summary type="html">Ember.js has computed properties for aggregating data which are automatically re-calculated when the source data set changes. But what if we want to display aggregate data from an async relationship in a list view? We might have the following: App.Invoice = DS.Model.extend lineItems: DS.hasMany('lineItem', { async: true }) lineItemAmounts: Ember.computed.mapBy('lineItems', 'amount') amount: Ember.computed.sum('lineItemAmounts') Each App.Invoice has a bunch of App.LineItems, and calculates its own amount by summing up their individual amounts. However, each time an invoice is rendered, all of the line items will be fetched from the server in order to make this calculation. What we can do instead is send the aggregate figure from the server along with the invoice. It might be calculated on the fly (with a group by query, for example), or maintained along with the invoice. Here‚Äôs an approach that does exactly this, but will switch to using the real ember data objects once they have been loaded: App.Invoice = DS.Model.extend subtotal: DS.attr('number') lineItems: DS.hasMany('lineItem', { async: true }) lineItemAmounts: Ember.computed.mapBy('lineItems', 'amount') lineItemAmountsSum: Ember.computed.sum('lineItemAmounts') # Uses subtotal until async lineItems become available amount: (-&amp;gt; if @cacheFor('lineItems') @get('lineItemAmountsSum') else @get('subtotal') ).property('lineItems.@each.amount') In this case subtotal is the aggregated amount from the server.</summary></entry><entry><title type="html">Lazy and Partial Data Loading with Ember.js and Rails</title><link href="https://watsonbox.github.com/blog/2014/06/13/lazy-and-partial-data-loading-with-ember-dot-js-and-rails/" rel="alternate" type="text/html" title="Lazy and Partial Data Loading with Ember.js and Rails" /><published>2014-06-13T14:43:13+02:00</published><updated>2014-06-13T14:43:13+02:00</updated><id>https://watsonbox.github.com/blog/2014/06/13/lazy-and-partial-data-loading-with-ember-dot-js-and-rails</id><content type="html" xml:base="https://watsonbox.github.com/blog/2014/06/13/lazy-and-partial-data-loading-with-ember-dot-js-and-rails/">&lt;p&gt;While learning &lt;a href=&quot;http://emberjs.com/&quot;&gt;Ember.js&lt;/a&gt;, I couldn‚Äôt find all the info laid out clearly in one place on these subjects, so thought I‚Äôd write up my findings. I‚Äôm using Ember.js 1.5.1, Ember Data 1.0.0-beta.7+canary.f482da04 (!!), and Rails 4.1.0.&lt;/p&gt;

&lt;h2 id=&quot;lazy-loading-relationships&quot;&gt;Lazy Loading Relationships&lt;/h2&gt;

&lt;p&gt;Most of the &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.ActiveModelSerializer.html&quot;&gt;Rails/Ember guidelines&lt;/a&gt; out there suggest that related data should normally be sideloaded, which is great and helps reduce the number of HTTP requests required, or data duplication (in the case of embedded data). To sideload data, set up the relationship and Rails serializer as follows:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/assets/javascripts/models/project.js.coffee&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-coffeescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;extend&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'string'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'string'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;invoices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'invoice'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/serializers/project_serializer.rb&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProjectSerializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Serializer&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:invoices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;embed: :ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;include: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Sideload relationship&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Example JSON response:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;projects&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Project 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;invoice_ids&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;invoices&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;reference&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;INV-002&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2014-06-11&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;project_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;reference&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;INV-001&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2014-04-04&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;project_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;async-loading&quot;&gt;Async Loading&lt;/h3&gt;

&lt;p&gt;Often we‚Äôd prefer to lazily load the associated data only when it‚Äôs referenced. Ember Data calls this an async relationship. Simply modify the above by omitting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt; serializer option and adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt; to the relationship:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/assets/javascripts/models/project.js.coffee&lt;/code&gt; (partial)&lt;/p&gt;

&lt;div class=&quot;language-coffeescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;invoices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'invoice'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/serializers/lazy_project_serializer.rb&lt;/code&gt; (partial)&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:invoices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;embed: :ids&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Example JSON response:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;projects&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Project 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;invoice_ids&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invoices&lt;/code&gt; relationship is accessed, Ember Data will automatically make a request to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/invoices?ids[]=1&amp;amp;ids[]=2&lt;/code&gt; (or presumably wherever that route is defined), so the Rails &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InvoicesController&lt;/code&gt; must be set up to restrict returned data based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ids&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update 30/12/14: Since Ember Data v1.0.0-beta.9 &lt;a href=&quot;http://emberjs.com/blog/2014/08/18/ember-data-1-0-beta-9-released.html&quot;&gt;has many coalescing has become opt-in&lt;/a&gt;. This means setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;coalesceFindRequests: true&lt;/code&gt; on the REST adapter for the above behavior. Thanks to CamonZ for pointing this out.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Note that if an association is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt;, but sideloaded data exists in the server response, Ember Data will simply use that data and not attempt to make another request. This is useful, allowing data to be sideloaded for a detail view because we know we‚Äôre going to need it, but not for a list view where it might not be used. When moving from list to detail, the invoices will be loaded, but when arriving directly on the detail page, only the project will be loaded. Specify a different serializer in Rails for each action:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/controllers/projects_controller.rb&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProjectsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;respond_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:json&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;respond_with&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;each_serializer: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LazyProjectSerializer&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;respond_with&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;async-loading-from-links&quot;&gt;Async Loading From Links&lt;/h3&gt;

&lt;p&gt;Another possibility, which gives more control over association endpoints, and avoids having to pass a bunch of IDs around, is to provide links for the relationships in the JSON response. For example:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/serializers/project_serializer.rb&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProjectSerializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Serializer&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:links&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;links&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;invoices: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project_invoices_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;loading-partial-models&quot;&gt;Loading Partial Models&lt;/h2&gt;

&lt;p&gt;Imagine that we have a dropdown list of projects in the page navbar. In addition to lazy loading related data, we might also want to omit attributes we know we‚Äôre not going to need yet. In this case a large project description might be a candidate for ommission from the list view, especially if the list of projects is large. The most comprehensive description of this problem I was able to find is &lt;a href=&quot;http://discuss.emberjs.com/t/loading-partial-models-then-filling-them-with-ember-data/819&quot;&gt;here&lt;/a&gt;, and includes links to related discussions.&lt;/p&gt;

&lt;p&gt;Firstly we need to identify the list data as partial by adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;partial&lt;/code&gt; attribute and setting it in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PartialProjectSerializer&lt;/code&gt;. We also ommit the invoices and description:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/assets/javascripts/models/project.js.coffee&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-coffeescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;extend&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'string'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'string'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;partial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'boolean'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;invoices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'invoice'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/serializers/partial_project_serializer.rb&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PartialProjectSerializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationSerializer&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:partial&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;partial&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We now have two problems to solve:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Reload a complete model for the detail view if we have only a partial model.&lt;/li&gt;
  &lt;li&gt;Don‚Äôt allow partial list data to overwrite a complete model if it comes in afterwards. You can simulate this in your dev environment using a threaded web server such as Puma and setting a delay on the resource index.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For the first we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setupController&lt;/code&gt; on the project route. Modifying the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;model&lt;/code&gt; hook won‚Äôt work when a model is passed for example to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;link-to&lt;/code&gt; because it &lt;a href=&quot;http://emberjs.com/guides/routing/asynchronous-routing/#toc_beforemodel-and-aftermodel&quot;&gt;doesn‚Äôt get called&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/assets/javascripts/routes/project_route.js.coffee&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-coffeescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Facture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ProjectRoute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;extend&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'project'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;project_id&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;setupController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# If the model is partial, we'll refresh it (from the full project resource)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'partial'&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'model'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It would be nice if we could solve the second problem by asking Ember Data to retrieve and &lt;em&gt;merge&lt;/em&gt; data from the server (using something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Store#find_and_update&lt;/code&gt;), but that doesn‚Äôt appear to be possible. It is however possible to update individual records using &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Store.html#method_update&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Store#update&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I‚Äôve been getting these projects in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApplicationRoute&lt;/code&gt;, which now looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/assets/javascripts/routes/application.js.coffee&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-coffeescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Facture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ApplicationRoute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;extend&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;setupController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getJSON&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/projects.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Update records in the store&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;projects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'projects'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Don't merge partial=true&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;existing_project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'project'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;existing_project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'partial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;vi&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'project'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# Set all records on the controller&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'projects'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;projects&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Howard Wilson</name></author><category term="posts" /><category term="Ember.js" /><category term="Ruby" /><category term="Rails" /><summary type="html">While learning Ember.js, I couldn‚Äôt find all the info laid out clearly in one place on these subjects, so thought I‚Äôd write up my findings. I‚Äôm using Ember.js 1.5.1, Ember Data 1.0.0-beta.7+canary.f482da04 (!!), and Rails 4.1.0. Lazy Loading Relationships Most of the Rails/Ember guidelines out there suggest that related data should normally be sideloaded, which is great and helps reduce the number of HTTP requests required, or data duplication (in the case of embedded data). To sideload data, set up the relationship and Rails serializer as follows: app/assets/javascripts/models/project.js.coffee App.Project = DS.Model.extend name: DS.attr('string') description: DS.attr('string') invoices: DS.hasMany('invoice') app/serializers/project_serializer.rb class ProjectSerializer &amp;lt; ActiveModel::Serializer attributes :id, :name has_many :invoices, embed: :ids, include: true # Sideload relationship end Example JSON response: { &quot;projects&quot;: [ { &quot;id&quot;: 1, &quot;name&quot;: &quot;Project 1&quot;, &quot;description&quot;: &quot;...&quot;, &quot;invoice_ids&quot;: [1, 2] } ], &quot;invoices&quot;: [ { &quot;id&quot;: 2, &quot;reference&quot;: &quot;INV-002&quot;, &quot;date&quot;: &quot;2014-06-11&quot;, &quot;project_id&quot;: 1 }, { &quot;id&quot;: 1, &quot;reference&quot;: &quot;INV-001&quot;, &quot;date&quot;: &quot;2014-04-04&quot;, &quot;project_id&quot;: 1 } ] } Async Loading Often we‚Äôd prefer to lazily load the associated data only when it‚Äôs referenced. Ember Data calls this an async relationship. Simply modify the above by omitting the include serializer option and adding async to the relationship: app/assets/javascripts/models/project.js.coffee (partial) invoices: DS.hasMany('invoice', { async: true }) app/serializers/lazy_project_serializer.rb (partial) has_many :invoices, embed: :ids Example JSON response: { &quot;projects&quot;: [ { &quot;id&quot;: 1, &quot;name&quot;: &quot;Project 1&quot;, &quot;description&quot;: &quot;...&quot;, &quot;invoice_ids&quot;: [1, 2] } ] } When the invoices relationship is accessed, Ember Data will automatically make a request to /invoices?ids[]=1&amp;amp;ids[]=2 (or presumably wherever that route is defined), so the Rails InvoicesController must be set up to restrict returned data based on the ids parameter. Update 30/12/14: Since Ember Data v1.0.0-beta.9 has many coalescing has become opt-in. This means setting coalesceFindRequests: true on the REST adapter for the above behavior. Thanks to CamonZ for pointing this out. Note that if an association is set to async, but sideloaded data exists in the server response, Ember Data will simply use that data and not attempt to make another request. This is useful, allowing data to be sideloaded for a detail view because we know we‚Äôre going to need it, but not for a list view where it might not be used. When moving from list to detail, the invoices will be loaded, but when arriving directly on the detail page, only the project will be loaded. Specify a different serializer in Rails for each action: app/controllers/projects_controller.rb class ProjectsController &amp;lt; ApplicationController respond_to :json def index respond_with Project.all, each_serializer: LazyProjectSerializer end def show respond_with Project.find(params[:id]) end end Async Loading From Links Another possibility, which gives more control over association endpoints, and avoids having to pass a bunch of IDs around, is to provide links for the relationships in the JSON response. For example: app/serializers/project_serializer.rb class ProjectSerializer &amp;lt; ActiveModel::Serializer attributes :id, :name, :links def links { invoices: project_invoices_path(id) } end end Loading Partial Models Imagine that we have a dropdown list of projects in the page navbar. In addition to lazy loading related data, we might also want to omit attributes we know we‚Äôre not going to need yet. In this case a large project description might be a candidate for ommission from the list view, especially if the list of projects is large. The most comprehensive description of this problem I was able to find is here, and includes links to related discussions. Firstly we need to identify the list data as partial by adding a partial attribute and setting it in a PartialProjectSerializer. We also ommit the invoices and description: app/assets/javascripts/models/project.js.coffee App.Project = DS.Model.extend name: DS.attr('string') description: DS.attr('string') partial: DS.attr('boolean') invoices: DS.hasMany('invoice', { async: true }) app/serializers/partial_project_serializer.rb class PartialProjectSerializer &amp;lt; ApplicationSerializer attributes :id, :name, :partial def partial true end end We now have two problems to solve: Reload a complete model for the detail view if we have only a partial model. Don‚Äôt allow partial list data to overwrite a complete model if it comes in afterwards. You can simulate this in your dev environment using a threaded web server such as Puma and setting a delay on the resource index. For the first we can use setupController on the project route. Modifying the model hook won‚Äôt work when a model is passed for example to link-to because it doesn‚Äôt get called. app/assets/javascripts/routes/project_route.js.coffee Facture.ProjectRoute = Ember.Route.extend model: (params) -&amp;gt; @store.find 'project', params.project_id setupController: (controller, model) -&amp;gt; # If the model is partial, we'll refresh it (from the full project resource) model.reload() if model.get 'partial' controller.set 'model', model It would be nice if we could solve the second problem by asking Ember Data to retrieve and merge data from the server (using something like Store#find_and_update), but that doesn‚Äôt appear to be possible. It is however possible to update individual records using Store#update. I‚Äôve been getting these projects in the ApplicationRoute, which now looks like this: app/assets/javascripts/routes/application.js.coffee Facture.ApplicationRoute = Ember.Route.extend setupController: (controller) -&amp;gt; $.getJSON '/projects.json', (data) =&amp;gt; # Update records in the store projects = data['projects'].map (project) =&amp;gt; # Don't merge partial=true if existing_project = @store.getById('project', project.id) project.partial = false unless existing_project.get('partial') @store.update 'project', project # Set all records on the controller controller.set 'projects', projects</summary></entry></feed>